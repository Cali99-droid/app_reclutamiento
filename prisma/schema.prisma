generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model rol {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)
  user user[]
}

model user {
  id                  Int                   @id @default(autoincrement())
  email               String?               @unique @db.VarChar(255)
  password            String                @db.VarChar(255)
  create_time         DateTime?             @default(now()) @db.Timestamp(0)
  rol_id              Int
  persona_id          Int
  convocatoria_x_user convocatoria_x_user[]
  persona             persona               @relation(fields: [persona_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_persona1")
  rol                 rol                   @relation(fields: [rol_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_rol")

  @@index([rol_id], map: "fk_user_rol_idx")
  @@index([persona_id], map: "fk_user_persona1_idx")
}

model persona {
  id           Int          @id @default(autoincrement())
  nombres      String       @db.VarChar(150)
  apellido_pat String       @db.VarChar(100)
  apellido_mat String       @db.VarChar(100)
  postulante   postulante[]
  user         user[]
}

model convocatoria {
  id                        Int                         @id @default(autoincrement())
  titulo                    String                      @db.VarChar(45)
  descripcion               String                      @db.VarChar(45)
  experiencia               Int
  gradoId                   Int                         @map("grado_id")
  estadoId                  Int                         @map("estado_id")
  sueldoOfertado            Float                       @map("sueldo_ofertado")
  vacantes                  Int
  categoria_id              Int?
  categoria                 categoria?                  @relation(fields: [categoria_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_convocatoria_categoria1")
  estado                    estado                      @relation(fields: [estadoId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_convocatoria_estado1")
  grado                     grado                       @relation(fields: [gradoId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_convocatoria_grado1")
  convocatoria_x_user       convocatoria_x_user[]
  evaluacion_x_postulante   evaluacion_x_postulante[]
  postulante_x_convocatoria postulante_x_convocatoria[]

  @@index([estadoId], map: "fk_convocatoria_estado1_idx")
  @@index([gradoId], map: "fk_convocatoria_grado1_idx")
  @@index([categoria_id], map: "fk_convocatoria_categoria1_idx")
}

model convocatoria_x_user {
  id              Int          @id @default(autoincrement())
  convocatoria_id Int
  user_id         Int
  convocatoria    convocatoria @relation(fields: [convocatoria_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_convocatoria_x_user_convocatoria1")
  user            user         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_convocatoria_x_user_user1")

  @@index([convocatoria_id], map: "fk_convocatoria_x_user_convocatoria1_idx")
  @@index([user_id], map: "fk_convocatoria_x_user_user1_idx")
}

model criterio {
  id                   Int                    @id @default(autoincrement())
  nombre               String                 @db.VarChar(45)
  puntaje_max          Int
  evaluacion_criterios evaluacion_criterios[]
}

model estado {
  id           Int            @id @default(autoincrement())
  nombre       String         @db.VarChar(80)
  convocatoria convocatoria[]
}

model estado_postulante {
  id                        Int                         @id @default(autoincrement())
  nombre                    String                      @db.VarChar(45)
  postulante_x_convocatoria postulante_x_convocatoria[]
}

model evaluacion {
  id                      Int                       @id @default(autoincrement())
  nombre                  String                    @db.VarChar(45)
  fecha_creacion          DateTime?                 @db.Date
  evaluacion_criterios    evaluacion_criterios[]
  evaluacion_x_postulante evaluacion_x_postulante[]
}

model evaluacion_x_postulante {
  id              Int          @id @default(autoincrement())
  puntaje         Int
  puntaje_max     Int
  postulante_id   Int
  convocatoria_id Int
  evaluacion_id   Int
  convocatoria    convocatoria @relation(fields: [convocatoria_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_evaluacion_x_postulante_convocatoria1")
  evaluacion      evaluacion   @relation(fields: [evaluacion_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_evaluacion_x_postulante_evaluacion1")
  postulante      postulante   @relation(fields: [postulante_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_evaluacion_x_postulante_postulante1")

  @@index([convocatoria_id], map: "fk_evaluacion_x_postulante_convocatoria1_idx")
  @@index([evaluacion_id], map: "fk_evaluacion_x_postulante_evaluacion1_idx")
  @@index([postulante_id], map: "fk_evaluacion_x_postulante_postulante1_idx")
}

model grado {
  id           Int            @id @default(autoincrement())
  nombre       String         @db.VarChar(100)
  convocatoria convocatoria[]
  postulante   postulante[]
}

model postulante {
  id                        Int                         @id @default(autoincrement())
  telefono                  String?                     @db.VarChar(45)
  direccion                 String                      @db.VarChar(45)
  experiencia               Int
  especialidad              String                      @db.VarChar(200)
  nacimiento                DateTime                    @map("fecha_nacimiento") @db.Date
  numeroDocumento           String                      @unique(map: "numero_documento_UNIQUE") @map("numero_documento") @db.VarChar(45)
  sueldo                    Float
  tipoId                    Int                         @map("tipo_documento_id")
  gradoId                   Int                         @map("grado_id")
  persona_id                Int
  evaluacion_x_postulante   evaluacion_x_postulante[]
  grado                     grado                       @relation(fields: [gradoId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_postulante_grado1")
  persona                   persona                     @relation(fields: [persona_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_postulante_persona1")
  tipo_documento            tipo_documento              @relation(fields: [tipoId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_postulante_tipo_documento1")
  postulante_x_convocatoria postulante_x_convocatoria[]

  @@index([gradoId], map: "fk_postulante_grado1_idx")
  @@index([tipoId], map: "fk_postulante_tipo_documento1_idx")
  @@index([persona_id], map: "fk_postulante_persona1_idx1")
}

model postulante_x_convocatoria {
  id                   Int               @id @default(autoincrement())
  convocatoria_id      Int
  postulante_id        Int
  estado_postulante_id Int
  convocatoria         convocatoria      @relation(fields: [convocatoria_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_postulante_x_convocatoria_convocatoria1")
  estado_postulante    estado_postulante @relation(fields: [estado_postulante_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_postulante_x_convocatoria_estado_postulante1")
  postulante           postulante        @relation(fields: [postulante_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_postulante_x_convocatoria_postulante1")

  @@index([convocatoria_id], map: "fk_postulante_x_convocatoria_convocatoria1_idx")
  @@index([postulante_id], map: "fk_postulante_x_convocatoria_postulante1_idx")
  @@index([estado_postulante_id], map: "fk_postulante_x_convocatoria_estado_postulante1_idx")
}

model tipo_documento {
  id         Int          @id @default(autoincrement())
  nombre     String?      @db.VarChar(45)
  postulante postulante[]
}

model evaluacion_criterios {
  id            Int        @id @default(autoincrement())
  orden         Int?
  peso          Int
  evaluacion_id Int
  criterio_id   Int
  criterio      criterio   @relation(fields: [criterio_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_evaluacion_criterios_criterio1")
  evaluacion    evaluacion @relation(fields: [evaluacion_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_evaluacion_criterios_evaluacion1")

  @@index([criterio_id], map: "fk_evaluacion_criterios_criterio1_idx")
  @@index([evaluacion_id], map: "fk_evaluacion_criterios_evaluacion1_idx")
}

model categoria {
  id           Int            @id @default(autoincrement())
  nombre       String         @db.VarChar(80)
  convocatoria convocatoria[]
}
